#ifndef __UTIL_H
#define __UTIL_H

/* In order to generate C code, the utility library needs exact-precision
   unsigned and signed integers. In particular, in order to ensure that we don't
   overflow the native integer containers when parsing Haris messages, we need
   to be certain about the minimum size of our integers. Haris defines the
   typedefs
   haris_intN_t
   and
   haris_uintN_t
   for N in [8, 16, 32, 64]. The intN types must be signed, and the uintN types
   must be unsigned. Each type must have at least N bits (that is, haris_int8_t
   must have at least 8 bits and must be signed). If your system includes 
   stdint.h (which it will if you have a standard-conforming C99 compiler), then
   the typedef's automatically generated by the code generator should be 
   sufficient, and you should be able to include the generated files in your 
   project without changing them. If you do not have stdint.h, then you'll have
   to manually modify the following 8 typedef's yourself (though that shouldn't
   take more than a minute to do). Make sure to remove the #include directive 
   if you do not have stdint.h.
*/

#include <stdint.h>

typedef uint_fast8_t    haris_uint8_t;
typedef int_fast8_t     haris_int8_t;
typedef uint_fast16_t   haris_uint16_t;
typedef int_fast16_t    haris_int16_t;
typedef uint_fast32_t   haris_uint32_t;
typedef int_fast32_t    haris_int32_t;
typedef uint_fast64_t   haris_uint64_t;
typedef int_fast64_t    haris_int64_t;

/* "Magic numbers" for use by float-reading and -writing functions; do not 
   modify
*/

#define FLOAT32_SIGBITS 23
#define FLOAT32_BIAS    127
#define FLOAT64_SIGBITS 52
#define FLOAT64_BIAS    1023

haris_uint8_t haris_read_uint8(unsigned char *);
haris_int8_t haris_read_int8(unsigned char *);
haris_uint16_t haris_read_uint16(unsigned char *);
haris_int16_t haris_read_int16(unsigned char *);
haris_uint32_t haris_read_uint32(unsigned char *);
haris_int32_t haris_read_int32(unsigned char *);
haris_uint64_t haris_read_uint64(unsigned char *);
haris_int64_t haris_read_int64(unsigned char *);

void haris_write_uint8(unsigned char *, haris_uint8_t);
void haris_write_int8(unsigned char *, haris_int8_t);
void haris_write_uint16(unsigned char *, haris_uint16_t);
void haris_write_int16(unsigned char *, haris_int16_t);
void haris_write_uint32(unsigned char *, haris_uint32_t);
void haris_write_int32(unsigned char *, haris_int32_t);
void haris_write_uint64(unsigned char *, haris_uint64_t);
void haris_write_int64(unsigned char *, haris_int64_t);

float haris_read_float32(unsigned char *);
double haris_read_float64(unsigned char *);

void haris_write_float32(unsigned char *, float);
void haris_write_float64(unsigned char *, double);

#endif
