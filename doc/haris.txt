TYPES:

Int8, Uint8, Bool
Int16, Uint16
Int32, Uint32
Int64, Uint64
Text

All of these (besides Text) are scalar datatypes. Text is a built-in list
datatype. For any existing non-list non-nullable datatype T, `T []` is a 
valid type representing a list of T. Further, for any non-scalar non-nullable 
datatype T, `T ?` is also a valid type, representing a nullable T. Lists can be
nullable (`T [] ?` is valid as long as T is not itself nullable or a list), but
list elements cannot be nullable (`T ? []` is never valid and is in fact a
syntax error). Structures can always be nullable regardless of the contents of 
the structure.

ATOMIC DATATYPE ENCODING:

- Booleans: Booleans are encoded in one byte. An encoding of 0 represents
"False", and an encoding of any number but 0 represents "True".
- Integers: Integers are encoded in little-endian two's complement byte order.
- Floats: Floats are encoded in their corresponding IEEE 754 formats in
little-endian byte order.
- Enums: Enums are stored in a single byte (that is, as Uint8's).

NULL OBJECTS:

A null object can represent either a null list or a null structure, and it can
be captured in a single byte, which is the NUL byte:

0000 0000

STRUCTURES:

All nonnull structures have a 2-byte header. The first two bits of a nonnull
structure are always "01".

We also need to encode the size of the structure.
Non-null structures are divided into two parts: the structure body and and 
children. The body is the fixed-length section of the structure where the
scalar fields are stored; the children are the sub-structures of the structure,
and are stored after the structure body sequentially. The header of a non-null
structure must keep its body size in the header as well as the number of
children. The number of children is stored as a 6-bit unsigned integer
in the lower 6 bits of the first byte of the 2-byte structure header, and
the number of bytes in the structure body (not including the header or children)
is stored as a 1-byte unsigned integer in the second byte of the header.

01CC CCCC    BBBB BBBB

C = number of children
B = size of structure body in bytes

The body immediately follows the header, and the children immediately follow
the body. There is no padding between the three sections. The smallest
possible non-null structure is "0100 0000    0000 0000" which has a 0-byte
body and 0 children.

< 2-byte header >< .... body .... >< .... children .... >

SCALAR LISTS

Every list has a header as well. Unlike structures, which can have headers
that are either 1 or 2 bytes in size, a list header is either 1, 4, or 6 bytes 
in size. We tell a list from a structure by a "1" in the msb of the first byte 
of the header. 

We further subdivide lists in this manner: a non-null list can either be a
"scalar" list or a "structure" list. (List elements cannot themselves be
lists, in order to simplify the mapping between the encoding and the target
language.) Scalar lists have a "0" in the 2nd msb of the first byte of the 
header. The 2 least significant bits give the size of one array element:

00 - 1 byte
01 - 2 bytes
10 - 4 bytes
11 - 8 bytes

The 3 bytes following this first byte are a 3-byte unsigned integer giving
us the number of elements in the list.

10XX XXSS    < 3-byte integer >

S = size of element (as given above)

Let N be the number of elements in the array. Then the number of bytes remaining
in the list (not counting the header) can be calculated as 
   N * (size of element) 

STRUCTURE LISTS

We capture structure lists by encoding "11" in the first 2 bits of the first
byte of the header. As above, there is a 3-byte integer giving us the number
of elements in the list directly following the first byte of the header. 
However, the header does contain some extra information as well.

Because each element of a list must have the same schema, all list elements
must have the same structural makeup (that is, body size and number of
children). This means that the headers for each structure contain
largely redundant information and could theoretically be entirely
omitted. We include the 2-byte structure header after the first byte of the
header, and then the H-byte integer giving the number of list elements.

11XX XXXX    < 3-byte integer >    < 2-byte structure header >

Of course, the list elements follow the header serially.

< 6-byte header >< .... elements .... >

LIMITS

Haris is not a great format for dealing with extremely large messages. Because
of the way the encoding works, a message must generally be encoded and decoded
all at once (and so the message encoding must fit entirely in memory). 
For this reason, the generated code does rigorous sanity-checking over message
sizes to make sure messages don't get too large. We cap the maximum message
size at 1 billion bytes (about 0.93 GB). This is not an entirely arbitrary
choice: in practice, this is large enough to fit an entire encoded message as
well as its decoded in-memory representation memory at once on a system with
32 bits of addressable space. This is useful because it allows us to capture
the encoded size of a structure in a 32-bit integer. If you wish to be more
stringent about message sizes, you can decrease the number of bytes that your
own Haris client will process at once by modifying your own source code.

However, I do not think that Haris will end up being a bad choice to
serialize larger datasets. In fact, I have a suspicion that it will end up
being an appropriate serialization technique for large object streams. This
is because the structural information of a Haris message is self-descriptive,
so it is tailor-made for streaming. As a simple example, imagine you write
a Haris message into a file, and then you write another random blob of data
(say, the text of War and Peace). When you read the message from the file later,
the file cursor will be waiting at the beginning of War and Peace, ready
for you to read. You can append any arbitrary data to the end of a Haris
message, and the data will be waiting in the stream once you parse the message.
Of course, the data can be another Haris message, which means that if you
write 10 Haris messages to a stream, you can read them all back in sequence.
With other binary data serialization protocols, this is generally not the case.
With Protocol Buffers, you have to manually "frame" the message by encoding
the message length, pulling EXACTLY that many bytes from the stream, and then
parsing the in-memory buffer. With Haris, you can just parse the file's
messages in sequence, but it gets better: if all of the messages are of
the same type, then you can even go so far as to re-use allocated C structures
when parsing the messages in sequence. This allows you to minimize reallocation
when reading an arbitrary number of structures from an input, assuming each
input structure has the same type.

The encoding also enforces other limits. The body of a structure can be a 
maximum of 255 bytes, and a structure can only have a maximum of 63 children.
These limits are fairly high for practical use, but they are low enough that
you can hit the limits if you're not careful. It is good practice to keep tabs
on structure sizes as your protocol evolves, and "refactor" your structure
definitions when any structure begins to approach the limit. Further,
list sizes are capped at 2^24 - 1 elements. Finally, in order to prevent
stack overflows from malicious or poorly-formed messages, we enforce a
maximum recursion depth on message sizes. The "tree" structure of a message
cannot by default be more than 64 layers deep (that is, processing the
structure cannot take more than 64 recursive calls). The body-size and
child-size elements can be detected at compile time, but the list-length
requirement, tree-depth requirement, and message-size requirement cannot 
generally be detected at compile time and so must be accounted for as runtime 
errors.
