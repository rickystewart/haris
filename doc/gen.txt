The Haris tool is split into two distinct sections:

1) The parser, which processes a Haris message from an input file and
constructs an in-memory schema; and
2) the code generator, which processes an in-memory schema and writes code
in the target language to one or more output files.

The parser is completely self-contained and the in-memory schema it produces
does not contain information relevant to any one target language. The output
of the parser is passed to the code generator. This architecture should make
it very easy to add support for more languages in the future, as doing so
requires only a familiarity with the structure of the in-memory schema.
Knowledge of the inner workings of the parser (which is itself very simple)
is not necessary in the majority of cases.

THE C COMPILER

The C compiler is the primary Haris code generator, and it is the proof-of-
concept of the Haris tool. These are the primary goals of the C compiler:

- The generated code shall be as simple and lightweight as possible. Ideally,
the generated code should be straightforward enough that it can be edited
by hand, but this may be an unrealistic goal as we move forward.
- The generated code shall have NO dependencies and should be 100% portable
and standard-conforming.
- The output of the code generator should be a few source files that should
be easily integrable into any project.
- The code should adhere to the C99 standard. The end-user should be able to
easily compile the code as C89 if he supplies his own typedef's for the exact-
precision integer types (that is, the only reason the generated code should need
C99 rather than C89 is stdint.h).
- The code should compile cleanly as C++ (though this is a secondary goal).
Obviously, a separate code generator for C++ would be preferable, though
compiling as C should still be an option if the user desires it.

C is a simple language, and data serialization (particularly in this language)
is a simple process, so complicated compiled C code doesn't help anyone. 
Here, we'll describe the process of C compilation at a high-level. Compilation
can be done in a few quick passes through the in-memory schema.

The output of the compiler for a given schema S.haris is the following 4 files:

- util.h
- util.c
- S.h
- S.c

Notably, the utility files never change. No matter what the contents of the
schema file are, util.h and util.c are always the same. S.h contains the
structure definitions, enumeration definitions, and function prototypes for
the given schema. S.c contains the function definitions. The utility library
namespaces its functions and macros by prepending every name with "haris_".
You can specify a prefix for all public names in the S.h and S.c files on
the command line.

The generated code is specified in this way:

For every enum in the schema, all the values are added to the header file
as macros. In particular, for every field F in every enum E, E_F is defined
to be a numeric value. For instance, if we have the enumeration
  enum Foo ( BAR )
then the C code that is generated is

#define Foo_BAR 0

For every structure S in the schema, a structure is generated in the C code
like so:

typedef struct S S;

struct S {
  ...
};

For every field F in S, F is a field in the C structure as well with the
appropriate type. (Structure types are represented by pointers; list types
by double-pointers; and enumerations by uint8_t's.) Additionally:

- For every list field F in S, _len_F is a uint64 field that contains the
number of elements in F. 

For every structure S, the following functions are defined globally:

- S *S_create(void), which constructs a new S and initializes all of its
elements to the appropriate 0 type.
- void S_destroy(S *), which frees the memory associated with the given S.
This function recursively frees all non-NULL child structures. If you do NOT
wish to recursively free all non-NULL child structures, then just call free()
on the pointer.
- Further, for every list element F in S, 
  HarisStatus S_init_F(S *, haris_uint32_t) is 
included as a utility function. The second argument is the number of elements.
This function allocates an appropriately-sized array to hold the elements
and sets the _len_F field.
- Then, there are the functions for encoding and decoding. These are created
depending on the protocol you choose. Initially, two protocols will be
implemented: "buffer" and "file". You can choose your protocol from the 
command-line.

That's it! All structure elements (except those beginning with an underscore)
can be directly manipulated by the user, and the encoding and decoding 
function will handle the rest.

Let's construct an example. We'll stub out the structure definitions and
function declarations for a simple schema.

enum PhoneType (
  MOBILE, HOME, WORK
)

struct Phone (
  Phonetype type,
  Text number
)

struct Person (
  Text name,
  Text email,
  Uint8 age,
  Phone [] phones
)

This will generate for us the following structure definitions:

/* enum PhoneType */
#define PhoneType_MOBILE 0
#define PhoneType_HOME 1
#define PhoneType_WORK 2

typedef struct Phone Phone;
typedef struct Person Person;

struct Phone {
  PhoneType type;
  haris_uint64_t _len_number;
  char *number;
};

struct Person {
  haris_uint64_t _len_name;
  char *name;
  haris_uint64_t _len_email;
  char *email;
  haris_uint8_t age;
  haris_uint64_t _len_phones;
  Phone **phones;
};

And the following function declarations:

Phone *Phone_create(void);
void Phone_destroy(Phone *);
HarisStatus Phone_init_number(Phone *, haris_uint32_t);

Person *Person_create(void);
void Person_destroy(Person *);
HarisStatus Person_init_name(Person *, haris_uint32_t);
HarisStatus Person_init_email(Person *, haris_uint32_t);
HarisStatus Person_init_phones(Person *, haris_uint32_t);

The only thing left is the protocol functions, which vary based on the protocol
you select.

COMMAND LINE OPTIONS

The core command line option is "-l", which selects the target language for
the compiler. No other command line options will be recognized until you
provide the target language.

To run the C compiler, provide "-l c" as the first command-line options. The
other command line options are as follows:

-h : Ignore all other command line options and instead summarize the possible
command line options. 
-n : Prefix all global names (outside of the utility library) with the following
string.
-o : Write the output to a file whose name begins with this string. For example,
if the argument is "-o hello", the output files will be hello.h and hello.c.
-p : Protocol selection. You must select at least one protocol, though you
may select more than one. Possible protocols, at this point in time, include
"buffer" (which includes functions for writing/reading messages to/from 
unsigned character buffers) and "file" (which includes functions for 
writing/reading messages to/from files). "fd" (for "file descriptor") is
likely to be added as a future protocol.

THE GENERATED LIBRARY

Let's talk about the generated library. In addition to the small set of 
public-facing functions that are included in the header file, a set of 
"static" helper functions are generated by the library. Besides the public-
facing functions (which deal primarily in object allocation and deallocation),
a library of functions called the "transformation library" is generated,
which deals primarily in writing structures to character buffers and reading
them from character buffers. All of the "protocol functions" are in fact
defined (quite simply) in terms of the transformation library. Here
are the prototypes for the transformation library functions.

For every structure S, the following prototypes are generated:

static unsigned char *S_lib_write_header(S *, unsigned char *);
static unsigned char *S_lib_write_nonnull_header(unsigned char *);
static unsigned char *S_lib_write_body(S *, unsigned char *);
static unsigned char *S_lib_write_hb(S *, unsigned char *);

static void S_lib_read_body(S *, unsigned char *);

The first three functions consume a structure and a character buffer and
return the address where the writing of the buffer should continue. 
(S_lib_write_hb merely writes the header and body in sequence.) Notably,
these functions will not check that S is not NULL; that is, they will
happily write a null structure to the buffer. If the schema forbids a null
structure in that place, you should be careful to check yourself.

The various protocols can all fairly easily be defined in terms of these
helper functions, as long as we are careful to allocate buffers of the
appropriate size. To help with this, the following macros are defined:

#define S_LIB_BODY_SIZE N

This macro contains the number of bytes required to hold the header and
body of a complete S structure. The size of a particular structure can
be determined recursively by adding this number to the body size of the
structure's child elements. This macro allows us to define the following
core function:

static haris_uint32_t S_lib_size(S *, int, HarisStatus *);

Notice that because a null structure takes 1 byte to encode, 0 is not a valid
structure size, so 0 shall be returned in case of an error. If there *is* an
error, then the HarisStatus out parameter is modified to reflect the error.
There are three general classes of errors that this function can capture:
- Message size errors (when the size of a generated message would be greater
than the billion-byte limit we enforce on message sizes)
- Recursion depth errors (when a structure breaks the 64-level recursion limit
that we enforce to prevent stack overflows)
- Null errors (when a structure field is NULL when the type does not allow
the field to be nullable)

This function serves a dual purpose for message encoding. In addition to 
finding the message size (so we can allocate an appropriately sized buffer),
it finds any possible errors in the structure. If this function succeeds 
without raising an error, then we can encode the structure without doing
any error checking. The encoding protocols are rather easy to write once we 
have these core functions.

FILE PROTOCOL

Public-facing functions:
- HarisStatus S_from_file(S *, FILE *);
-- This function immediately calls _S_from_file. If the resultant structure
is null, we return an error; otherwise, we return a success code.
- HarisStatus S_to_file(S *, FILE *);
-- This function first checks whether its argument is NULL and returns if that
is the case. It then does an analysis of the structure to determine that it
will produce a structurally sound message. If the check succeeds, then we call
_S_to_file to write the message.

Private functions:
- HarisStatus _S_from_file(S *, FILE *, haris_uint32_t *, int);
-- This function reads the structure header information and reads the body
into an array on the stack, and then copies the information from the buffer
into the structure. It then loops through all the child elements, copying them
into the appropriate places.
- HarisStatus _S_to_file(S *, FILE *)
-- This function writes the header and body to an appropriately sized 
in-memory buffer, and then writes the result to the file. The children are
then written in the appropriate order (by calling the appropriate _S_to_file
functions).

BUFFER PROTOCOL

Public-facing functions:
- HarisStatus S_from_buffer(S *, unsigned char *, haris_uint32_t sz,
                             unsigned char **);
-- This function immediately calls _S_from_buffer. If the resultant structure
is null, we return an error; otherwise, we return a success code.
- HarisStatus S_to_buffer(S *, unsigned char **, haris_uint32_t *);
-- This function first checks whether its argument is NULL and returns if that
is the case. It then finds the length of the message (with S_lib_size) and
allocates the appropriately sized buffer (returning if there is a structural
error). It then calls _S_to_buffer on the structure to write the structure
to the buffer.

Private functions:
- HarisStatus _S_from_buffer(S *, unsigned char *, haris_uint32_t ind, 
                             haris_uint32_t sz, haris_uint32_t *, int);
-- This function reads the structure header information and reads the body
into an array on the stack, and then copies the information from the buffer
into the structure. It then loops through all the child elements, copying them
into the appropriate places.
- HarisStatus _S_to_buffer(S *, unsigned char *, unsigned char **);
-- This function first writes the header and body to the buffer. If the 
structure is not NULL (and we must be careful to check this), the children
are then written in the appropriate order (calling the appropriate _S_to_buffer
functions to write them).
